#lang racket/base

;;;
;;; iterator-syntax-classes.rkt
;;;
;;; Provides all the iterator-specific syntax classes.
;;;

(require syntax/parse
         "common-syntax-classes.rkt")

(provide (all-defined-out))

(define-splicing-syntax-class bind-directive
  #:attributes (bind)
  (pattern (~optional (~seq #:bind bind)
                      #:defaults ([bind  #'(void)]))))

(define-syntax-class iterator
  (pattern unexpanded:expr
           #:with
           (([(outer-id:id ...) outer-expr:expr] ...)
            (outer-check:expr ...)
            ([loop-id:id loop-expr:expr] ...)
            pos-guard:expr
            ([(inner-id:id ...) inner-expr:expr] ...)
            pre-guard:expr
            match-expr:expr
            ([(body-id:id ...) body-expr:expr] ...)
            post-guard:expr
            (loop-arg:expr ...))
           (local-expand (if (identifier? #'unexpanded)
                             (syntax/loc #'unexpanded
                               (unexpanded))
                             #'unexpanded)
                         'expression
                         #f)))

(define-syntax-class expanded-iterator
  (pattern (([(outer-id:id ...) outer-expr:expr] ...)
            (outer-check:expr ...)
            ([loop-id:id loop-expr:expr] ...)
            pos-guard:expr
            ([(inner-id:id ...) inner-expr:expr] ...)
            pre-guard:expr
            match-expr:expr
            ([(body-id:id ...) body-expr:expr] ...)
            post-guard:expr
            (loop-arg:expr ...))))
