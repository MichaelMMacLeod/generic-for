#lang racket/base

;;;
;;; accumulator-syntax-classes.rkt
;;;
;;; Provides all the accumulator-specific syntax classes.
;;;

(require syntax/parse
         "common-syntax-classes.rkt")

(provide (all-defined-out))

(define-splicing-syntax-class pos-done-directive
  #:attributes (pos-done)
  (pattern (~optional (~seq #:pos-done pos-done))))

(define-splicing-syntax-class pre-done-directive
  #:attributes (pre-done)
  (pattern (~optional (~seq #:pre-done pre-done))))

(define-splicing-syntax-class body-results-directive
  #:attributes (body-results)
  (pattern (~optional (~seq #:body-results body-results)
                      #:defaults ([body-results #'(_)]))))

(define-splicing-syntax-class return-directive
  #:attributes (return)
  (pattern (~optional (~seq #:return return)
                      #:defaults ([return #'(void)]))))

(define-splicing-syntax-class post-done-directive
  #:attributes (post-done)
  (pattern (~optional (~seq #:post-done post-done))))

(define-syntax-class accumulator
  (pattern unexpanded:expr
           #:with (([(outer-id:id ...) outer-expr:expr] ...)
                   (outer-check:expr ...)
                   ([loop-id:id loop-expr:expr] ...)
                   pos-guard:expr
                   pos-done-expr:expr
                   ([(inner-id:id ...) inner-expr:expr] ...)
                   pre-guard:expr
                   pre-done-expr:expr
                   (body-result:id ...)
                   ([(body-id:id ...) body-expr:expr] ...)
                   post-guard:expr
                   post-done-expr:expr
                   (loop-arg:expr ...))
           (local-expand (if (identifier? #'unexpanded)
                             (syntax/loc #'unexpanded
                               (unexpanded))
                             #'unexpanded)
                         'expression
                         #f)))

(define-syntax-class expanded-accumulator
  (pattern (([(outer-id:id ...) outer-expr:expr] ...)
            (outer-check:expr ...)
            ([loop-id:id loop-expr:expr] ...)
            pos-guard:expr
            pos-done-expr:expr
            ([(inner-id:id ...) inner-expr:expr] ...)
            pre-guard:expr
            pre-done-expr:expr
            (body-result:id ...)
            ([(body-id:id ...) body-expr:expr] ...)
            post-guard:expr
            post-done-expr:expr
            (loop-arg:expr ...))))
